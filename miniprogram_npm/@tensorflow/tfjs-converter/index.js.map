{"version":3,"file":"index.js","sources":["../../src/data/compiled_api.ts","../../src/operations/custom_op/register.ts","../../src/operations/executors/utils.ts","../../src/operations/op_list/arithmetic.ts","../../src/operations/op_list/basic_math.ts","../../src/operations/op_list/control.ts","../../src/operations/op_list/convolution.ts","../../src/operations/op_list/creation.ts","../../src/operations/op_list/dynamic.ts","../../src/operations/op_list/evaluation.ts","../../src/operations/op_list/graph.ts","../../src/operations/op_list/image.ts","../../src/operations/op_list/logical.ts","../../src/operations/op_list/matrices.ts","../../src/operations/op_list/normalization.ts","../../src/operations/op_list/reduction.ts","../../src/operations/op_list/slice_join.ts","../../src/operations/op_list/spectral.ts","../../src/operations/op_list/transformation.ts","../../src/operations/operation_mapper.ts","../../src/operations/custom_op/node_value_impl.ts","../../src/executor/tensor_utils.ts","../../src/executor/tensor_array.ts","../../src/executor/tensor_list.ts","../../src/operations/executors/control_executor.ts","../../src/operations/executors/convolution_executor.ts","../../src/operations/executors/dynamic_executor.ts","../../src/operations/operation_executor.ts","../../src/operations/executors/arithmetic_executor.ts","../../src/operations/executors/basic_math_executor.ts","../../src/operations/executors/creation_executor.ts","../../src/operations/executors/evaluation_executor.ts","../../src/operations/executors/image_executor.ts","../../src/operations/executors/graph_executor.ts","../../src/operations/executors/logical_executor.ts","../../src/operations/executors/matrices_executor.ts","../../src/operations/executors/normalization_executor.ts","../../src/operations/executors/reduction_executor.ts","../../src/operations/executors/slice_join_executor.ts","../../src/operations/executors/spectral_executor.ts","../../src/operations/executors/transformation_executor.ts","../../src/executor/execution_context.ts","../../src/executor/model_analysis.ts","../../src/executor/graph_executor.ts","../../src/executor/graph_model.ts","../../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const tensor =\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0];\n  }\n\n  const nodeName = parts[0];\n  return [nodeName, Number(parts[parts.length - 1])];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 3, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'},\n      {'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'rates', 'name': 'dilations', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'TopKV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'k', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Unique',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n  },\n  {\n    'tfOpName': 'UniqueV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n  },\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool'},\n      {'tfName': 'reverse', 'name': 'reverse', 'type': 'bool'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': []\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  util.assert(\n      shapesEqualAllowUndefinedSize(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, elementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, elementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n\n    return this.tensors[elementIndex];\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], elementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, elementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const outputShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      outputShape, elementShape, 'TensorList shape mismatch: ');\n\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), elementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  const [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfOps.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [tfOps.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfOps.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = tfOps.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [tfOps.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n          return [tfOps.add(\n              (getParamValue('a', node, tensorMap, context) as Tensor),\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'AddN': {\n          return [tfOps.addN((\n              getParamValue('tensors', node, tensorMap, context) as Tensor[]))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n          return [tfOps.mod(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'Mul':\n          return [tfOps.mul(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'RealDiv':\n        case 'Div': {\n          return [tfOps.div(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'DivNoNan': {\n          return [tfOps.divNoNan(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'FloorDiv': {\n          return [tfOps.floorDiv(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sub': {\n          return [tfOps.sub(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Minimum': {\n          return [tfOps.minimum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Maximum': {\n          return [tfOps.maximum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Pow': {\n          return [tfOps.pow(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'SquaredDifference': {\n          return [tfOps.squaredDifference(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [tfOps.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [tfOps.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [tfOps.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [tfOps.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [tfOps.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [tfOps.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [tfOps.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [tfOps.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [tfOps.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [tfOps.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [tfOps.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [tfOps.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [tfOps.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [tfOps.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [tfOps.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [tfOps.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [tfOps.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [tfOps.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [tfOps.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [tfOps.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [tfOps.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [tfOps.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [tfOps.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [tfOps.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [tfOps.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [tfOps.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [tfOps.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [tfOps.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [tfOps.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [tfOps.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [tfOps.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [tfOps.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [tfOps.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [tfOps.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [tfOps.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu6':\n        case 'ClipByValue':\n          return [tfOps.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Rsqrt':\n          return [tfOps.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [tfOps.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [tfOps.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = tfOps.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = tfOps.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = tfOps.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [tfOps.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [tfOps.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => tfOps.tensor1d(t.shape));\n        case 'Size':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [tfOps.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [tfOps.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [tfOps.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [tfOps.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [tfOps.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [tfOps.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [tfOps.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [tfOps.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [tfOps.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [tfOps.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [tfOps.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [tfOps.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Transpose':\n          return [tfOps.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [tfOps.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [tfOps.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [tfOps.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [tfOps.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [tfOps.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [tfOps.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [tfOps.concat(inputs, axis)];\n        }\n        case 'GatherV2':\n        case 'Gather': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis)];\n        }\n        case 'ReverseV2':\n        case 'Reverse': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [tfOps.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [tfOps.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      tfOps.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : tfOps.reshape(tensor, shape);\n            });\n            return [tfOps.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [tfOps.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [tfOps.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [tfOps.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [tfOps.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [tfOps.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [tfOps.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [tfOps.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [tfOps.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [tfOps.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [tfOps.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [tfOps.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [tfOps.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [tfOps.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [tfOps.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds: Set<number>) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   * @param isFunctionExecution Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames: string[],\n      isFunctionExecution: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    const outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n    let signature = {};\n    if (this.artifacts.userDefinedMetadata != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    }\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n\n    if (artifacts.modelInitializer != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      this.initializer.execute({}, []);\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.6.0';\nexport {version};\n"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","name","getParamValue","paramName","node","tensorMap","context","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","tensor","data","dataSync","util","toNestedArray","shape","attrParam","attrParams","value","tensorsMap","_a","nodeName","index","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parseNodeName","parts","split","length","Number","getPadding","pad","explicitPadding","i","cloneTensor","kept","clone","tfOpName","category","inputs","attrs","tfName","notSupported","defaultValue","tfDeprecatedName","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","mappersJson","concat","op","json","this","opMappers","reduce","mapper","Object","OperationMapper","_instance","signature","tfNodes","placeholders","weights","initNodes","nodes","_this","mapNode","startsWith","push","input","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","keys","forEach","key","children","signatureKey","functions","library","function","func","mapFunction","result","entries","prev","curr","attr","newNode","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","parseStringParam","s","keepCase","Array","isArray","String","fromCharCode","apply","text","global","env","atob","Buffer","toString","decodeBase64","toLowerCase","def","b","parseInt","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","unknownRank","dim","size","f","getInput","getAttr","NodeValueImpl","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","assert","n1","n2","shapesEqualAllowUndefinedSize","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","idTensor","scalar","keep","TensorArray","id","closed_","keepIds","tensors","has","dispose","tensorWithState","cleared","read","indices","t","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","indices_1","sizes","elementDtype","maxNumElements","TensorList","numElements","reshapedTensors","pop","elementIndex","executeOp","thenFunc","elseFunc","cond","args","condValue","_b","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds_1","indexOf","origResult","resultIds","condResult_1","pred","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","writeTensor","writeTensorArray","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatterTensorArray","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","tensorList","getTensorList","setItem","elementDType","getItem","addTensorList","reserve","fromTensor","pushBack","popBack","TypeError","fusedConvAndDepthWiseParams","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","stride","dataFormat","toUpperCase","dilations","biasArg","preluArg","nmsParams","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","tfc.tidy","tfOps.add","tfOps.addN","tfOps.mod","tfOps.mul","tfOps.div","tfOps.divNoNan","tfOps.floorDiv","tfOps.sub","tfOps.minimum","tfOps.maximum","tfOps.pow","tfOps.squaredDifference","arithmetic.executeOp","tfOps.abs","tfOps.acos","tfOps.acosh","tfOps.asin","tfOps.asinh","tfOps.atan","tfOps.atan2","tfOps.atanh","tfOps.ceil","tfOps.complex","tfOps.cos","tfOps.cosh","tfOps.elu","tfOps.erf","tfOps.exp","tfOps.expm1","tfOps.floor","tfOps.log","tfOps.log1p","tfOps.imag","tfOps.neg","tfOps.reciprocal","tfOps.real","tfOps.relu","tfOps.round","tfOps.selu","tfOps.sigmoid","tfOps.sin","tfOps.sign","tfOps.sinh","tfOps.softplus","tfOps.sqrt","tfOps.square","tfOps.tanh","tfOps.tan","tfOps.clipByValue","tfOps.rsqrt","tfOps.prod","tfOps.leakyRelu","tfOps.prelu","basicMath.executeOp","control.executeOp","dilation","tfOps.conv1d","tfOps.conv2d","tfOps.fused","conv2d","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","tfOps.conv2dTranspose","tfOps.depthwiseConv2d","tfOps.conv3d","kernelSize","tfOps.avgPool","tfOps.maxPool","includeBatchInIndex","_c","tfOps.avgPool3d","tfOps.maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","tfOps.dilation2d","convolution.executeOp","tfOps.fill","stop_1","num","tfOps.linspace","logits","numSamples","seed","tfOps.multinomial","depth","onValue","offValue","tfOps.oneHot","tfOps.ones","tfOps.onesLike","tfOps.randomUniform","stop_2","step","tfOps.range","mean","stdDev","tfOps.truncatedNormal","tfOps.zeros","tfOps.zerosLike","creation.executeOp","tfOps.image","nonMaxSuppressionWithScoreAsync","_e","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","_d","nonMaxSuppressionAsync","condition","tfOps.cast","tfOps.whereAsync","tfOps.setdiff1dAsync","dynamic.executeOp","k","sorted","tfOps.topk","values","tfOps.unique","axis","evaluation.executeOp","images","alignCorners","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","image.executeOp","tfOps.tensor1d","tfOps.scalar","rank","message","summarize","console","warn","log","prototype","call","graph.executeOp","tfOps.equal","tfOps.notEqual","tfOps.greater","tfOps.greaterEqual","tfOps.less","tfOps.lessEqual","tfOps.logicalAnd","tfOps.logicalNot","tfOps.logicalOr","tfOps.where","logical.executeOp","tfOps.matMul","tfOps.transpose","matMul","a","transposeA","transposeB","matrices.executeOp","tfOps.batchNorm","tfOps.localResponseNormalization","tfOps.softmax","tfOps.logSoftmax","tfOps.sparseToDense","normalization.executeOp","keepDims","tfOps.max","tfOps.mean","tfOps.min","tfOps.sum","tfOps.all","tfOps.any","tfOps.argMax","tfOps.argMin","exclusive","reverse","tfOps.cumsum","reduction.executeOp","n","tfOps.concat","tfOps.gather","tfOps.reverse","begin","tfOps.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfOps.stridedSlice","squeezedShape","tfOps.squeeze","mapped","sameShape","arraysEqual","tfOps.reshape","tfOps.stack","tfOps.unstack","reps","tfOps.tile","numOrSizeSplits","tfOps.split","tfOps.scatterND","tfOps.gatherND","sparseValues","sliceJoin.executeOp","tfOps.fft","tfOps.ifft","tfOps.rfft","tfOps.irfft","spectral.executeOp","tfOps.expandDims","tfOps.pad","blockShape","paddings","tfOps.spaceToBatchND","crops","tfOps.batchToSpaceND","blockSize","tfOps.depthToSpace","tfOps.broadcastTo","transformation.executeOp","opMapper","customExecutor","Promise","then","weightMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","initNodeNames","frontier","isControlFlow","isDynamicShape","child","add","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","parent","Map","_outputs","_inputs","_initNodes","_signature","_functions","_functionExecutorMap","GraphExecutor","weightIds","_weightIds","functionExecutorMap","_weightMap","sortedInputs","sort","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","inputNodes","weight","orderedNodes","every","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","outputNodeNames","outputNodes","compilationKey","getCompilationKey","compiledMap","get","compile","set","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","count","_executeAsync","isFunctionExecution","executeWithControlFlow","results","outputIds","inputIds","isDisposed","mappedInputs","currentContext","added","promises","processStack","all","missingOutputs","alternativeMsg","item","currentContext_1","processChildNodes","this_1","childNode","some","shape_1","match","notInGraph","normalizedName","modelUrl","loadOptions","GraphModel","version","executor","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","findIOHandler","artifacts","loadSync","modelTopology","userDefinedMetadata","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","modelInitializer","initializer","execute","handlerOrURL","config","getSaveHandlers","save","Tensor","normalizeInputs","normalizeOutputs","executeAsync","newMap","options","fromTFHub","endsWith","model","opFunc"],"mappings":"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"}