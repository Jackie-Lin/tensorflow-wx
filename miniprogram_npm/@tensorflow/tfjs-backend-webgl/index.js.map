{"version":3,"file":"tf-backend-webgl.min.js","sources":["../src/canvas_util.ts","../src/tex_util.ts","../src/webgl_util.ts","../src/flags_webgl.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","../src/kernel_utils/shared.ts","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","../src/addn_gpu.ts","../src/addn_packed_gpu.ts","../src/argminmax_gpu.ts","../src/packing_util.ts","../src/glsl_version.ts","../src/shader_compiler_util.ts","../src/shader_compiler.ts","../src/argminmax_packed_gpu.ts","../src/avg_pool_backprop_gpu.ts","../src/binaryop_complex_gpu.ts","../src/binaryop_gpu.ts","../src/binaryop_packed_gpu.ts","../src/clip_gpu.ts","../src/clip_packed_gpu.ts","../src/complex_abs_gpu.ts","../src/concat_gpu.ts","../src/concat_packed_gpu.ts","../src/conv_backprop_gpu.ts","../src/conv_backprop_gpu_depthwise.ts","../src/conv_gpu.ts","../src/conv_gpu_depthwise.ts","../src/conv_packed_gpu_depthwise.ts","../src/crop_and_resize_gpu.ts","../src/cumsum_gpu.ts","../src/decode_matrix_gpu.ts","../src/decode_matrix_packed_gpu.ts","../src/depth_to_space_gpu.ts","../src/diag_gpu.ts","../src/encode_float_gpu.ts","../src/encode_float_packed_gpu.ts","../src/encode_matrix_gpu.ts","../src/encode_matrix_packed_gpu.ts","../src/fft_gpu.ts","../src/fill_gpu.ts","../src/gather_gpu.ts","../src/gather_nd_gpu.ts","../src/gpgpu_util.ts","../src/gpgpu_context.ts","../src/gpgpu_math.ts","../src/im2col_packed_gpu.ts","../src/lrn_gpu.ts","../src/lrn_grad_gpu.ts","../src/lrn_packed_gpu.ts","../src/max_pool_backprop_gpu.ts","../src/mulmat_packed_gpu.ts","../src/multinomial_gpu.ts","../src/onehot_gpu.ts","../src/pack_gpu.ts","../src/pad_gpu.ts","../src/pad_packed_gpu.ts","../src/pool_gpu.ts","../src/reduce_gpu.ts","../src/reshape_packed_gpu.ts","../src/resize_bilinear_backprop_gpu.ts","../src/resize_bilinear_gpu.ts","../src/resize_bilinear_packed_gpu.ts","../src/resize_nearest_neighbor_backprop_gpu.ts","../src/resize_nearest_neighbor_gpu.ts","../src/reverse_gpu.ts","../src/reverse_packed_gpu.ts","../src/scatter_gpu.ts","../src/segment_gpu.ts","../src/select_gpu.ts","../src/slice_gpu.ts","../src/slice_packed_gpu.ts","../src/strided_slice_gpu.ts","../src/texture_manager.ts","../src/tile_gpu.ts","../src/unaryop_gpu.ts","../src/unaryop_packed_gpu.ts","../src/unpack_gpu.ts","../src/backend_webgl.ts","../src/webgl.ts","../src/base.ts","../src/kernel_utils/kernel_funcs_utils.ts","../src/kernels/Atan2.ts","../src/kernels/Identity.ts","../src/kernels/AvgPool.ts","../src/kernels/AvgPoolBackprop.ts","../src/kernels/FromPixels.ts","../src/batchnorm_gpu.ts","../src/batchnorm_packed_gpu.ts","../src/kernels/BatchNorm.ts","../src/kernels/Cos.ts","../src/kernels/Div.ts","../src/flip_left_right_gpu.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/FromPixels_utils/from_pixels_gpu.ts","../src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../src/kernel_utils/reduce.ts","../src/kernels/Reshape.ts","../src/kernel_utils/reshape.ts","../src/transpose_gpu.ts","../src/transpose_packed_gpu.ts","../src/kernels/Transpose_impl.ts","../src/kernels/Max.ts","../src/kernels/Max_impl.ts","../src/kernels/MaxPool.ts","../src/kernels/MaxPoolBackprop.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/NonMaxSuppressionV3.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/rotate_gpu.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Sin.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/kernels/Tan.ts","../src/register_all_kernels.ts","../src/kernels/Unique.ts","../src/kernels/Transpose.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    const newCtx = getWebGLRenderingContext(webGLVersion);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {backend_util, DataId, DataType, Tensor, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\n// TODO: https://github.com/tensorflow/tfjs/issues/1679\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => false);\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n    return (aShape, bShape, aVals, bVals, dtype) => {\n        const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n        const resultRank = newShape.length;\n        const resultStrides = util.computeStrides(newShape);\n        const resultSize = util.sizeFromShape(newShape);\n        const result = util.getTypedArrayFromDType(dtype, resultSize);\n        const aRank = aShape.length;\n        const bRank = bShape.length;\n        const aStrides = util.computeStrides(aShape);\n        const bStrides = util.computeStrides(bShape);\n        const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n        if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n            }\n        }\n        else {\n            for (let i = 0; i < result.length; ++i) {\n                const loc = util.indexToLoc(i, resultRank, resultStrides);\n                const aLoc = loc.slice(-aRank);\n                aBroadcastDims.forEach(d => aLoc[d] = 0);\n                const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n                const bLoc = loc.slice(-bRank);\n                bBroadcastDims.forEach(d => bLoc[d] = 0);\n                const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n                result[i] = op(aVals[aIndex], bVals[bIndex]);\n            }\n        }\n        return [result, newShape];\n    };\n}\n//# sourceMappingURL=binary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/kernel_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n    return (values, dtype, attrs) => {\n        const newValues = util.getTypedArrayFromDType(dtype, values.length);\n        for (let i = 0; i < values.length; ++i) {\n            newValues[i] = op(values[i], attrs);\n        }\n        return newValues;\n    };\n}\n//# sourceMappingURL=unary_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceilKernelFunc = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceilKernelFunc,\n};\n//# sourceMappingURL=Ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const expKernelFunc = unaryKernelFuncFromImpl(Exp, expImpl);\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: expKernelFunc,\n};\n//# sourceMappingURL=Exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1KernelFunc = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1KernelFunc,\n};\n//# sourceMappingURL=Expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floorKernelFunc = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floorKernelFunc,\n};\n//# sourceMappingURL=Floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const logKernelFunc = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: logKernelFunc,\n};\n//# sourceMappingURL=Log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/kernel_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrtKernelFunc = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrtKernelFunc,\n};\n//# sourceMappingURL=Rsqrt.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/kernel_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n\nconst {\n  simpleAbsImpl: simpleAbsImplCPU,\n  addImpl: addImplCPU,\n  ceilImpl: ceilImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  sliceImpl: sliceImplCPU,\n  subImpl: subImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  simpleAbsImplCPU,\n  addImplCPU,\n  ceilImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  logImplCPU,\n  multiplyImplCPU,\n  sliceImplCPU,\n  subImplCPU,\n  floorImplCPU,\n  maxImplCPU,\n  rsqrtImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const absKernelFunc = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    if (x.dtype !== 'complex64') {\n        const values = cpuBackend.data.get(x.dataId).values;\n        resultValues = simpleAbsImpl(values);\n    }\n    else {\n        const complexVals = cpuBackend.data.get(x.dataId);\n        const real = complexVals.complexTensorInfos.real;\n        const imag = complexVals.complexTensorInfos.imag;\n        const realVals = cpuBackend.data.get(real.dataId).values;\n        const imagVals = cpuBackend.data.get(imag.dataId).values;\n        for (let i = 0; i < realVals.length; i++) {\n            const real = realVals[i];\n            const imag = imagVals[i];\n            resultValues[i] = Math.hypot(real, imag);\n        }\n    }\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: absKernelFunc,\n};\n//# sourceMappingURL=Abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const outVals = util.getTypedArrayFromDType(dtype, length);\n    for (let i = 0; i < length; ++i) {\n        const rank = size.length;\n        const strides = util.computeStrides(size);\n        const loc = util.indexToLoc(i, rank, strides);\n        const xLoc = loc.map((idx, j) => idx + begin[j]);\n        const xIndex = util.locToIndex(xLoc, shape.length, xStrides);\n        outVals[i] = vals[xIndex];\n    }\n    return outVals;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nconst CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const ADD = 'return a + b;';\nexport const SUB = 'return a - b;';\nexport const MUL = 'return a * b;';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nexport const INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nexport const POW = `\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const EQUAL = `return float(a == b);`;\n\nexport const NOT_EQUAL = `return float(a != b);`;\n\nexport const LESS = `return float(a < b);`;\n\nexport const LESS_EQUAL = `return float(a <= b);`;\n\nexport const GREATER = `return float(a > b);`;\n\nexport const GREATER_EQUAL = `return float(a >= b);`;\n\nexport const LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\n\nexport const LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\n\nexport const MAX = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nexport const MIN = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nexport const MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nexport const ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\n\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nconst CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const INT_DIV = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const POW = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const PRELU = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport const LESS = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const LESS_EQUAL = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const GREATER = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const GREATER_EQUAL = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const LOGICAL_AND = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const LOGICAL_OR = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const MAX = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MIN = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const MOD = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n        } else {\n          const channels = getChannels('coords', rank);\n          checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n\n  // Caching uniform locations for speed.\n  minLoc: WebGLUniformLocation;\n  maxLoc: WebGLUniformLocation;\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(min: number, max: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.minLoc == null) {\n        this.minLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'minVal');\n        this.maxLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'maxVal');\n      }\n      gpgpu.gl.uniform1f(this.minLoc, min);\n      gpgpu.gl.uniform1f(this.maxLoc, max);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${xNumRows}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${xNumCols}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `int xR; int xC; int xCOffset;`;\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n      }\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let texelC = 0; texelC < texelsAcross; texelC++) {\n        const c = texelC * 2;\n\n        mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                }\n\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n              }\n            }\n          }\n        } else {  // stride > 1\n          if (c < filterWidth) {\n            mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n            // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n              }\n            }\n\n            mainLoop += `}`;\n          }\n        }\n\n        if (c < filterWidth) {\n          mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n          }\n        }\n      }\n    }\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n      }\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  index: WebGLUniformLocation;\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(index: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.index == null) {\n        this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n      }\n      gpgpu.gl.uniform1f(this.index, index);\n    };\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const COMPLEX_FFT = {\n  REAL: 'return real * expR - imag * expI;',\n  IMAG: 'return real * expI + imag * expR;'\n};\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(op: string, inputShape: [number, number], inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${op}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  valueLoc: WebGLUniformLocation;\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(value: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.valueLoc == null) {\n        this.valueLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'value');\n      }\n      gpgpu.gl.uniform1f(this.valueLoc, value);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], indicesLength: number, axis: number) {\n    const outputShape: number[] = aShape.slice();\n    outputShape[axis] = indicesLength;\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, axis);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const rank = aShape.length;\n  if (rank > 4) {\n    throw Error(`Gather for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `int(getIndices(resRC))`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === axis) {\n      sourceCoords.push(`int(getIndices(${currentCoords[i]}))`);\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    const vertexShader: WebGLShader = gpgpu_util.createVertexShader(gl);\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const userCode = program.userCode;\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(\n      inputInfos, outShapeInfo, userCode, program.packedInputs);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    const shouldThrow = false;\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData,\n    customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) =>\n        void): void {\n  validateBinaryAndProgram(binary.inShapeInfos, inputs);\n  validateBinaryAndProgram([binary.outShapeInfo], [output]);\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  if (customSetup != null) {\n    customSetup(gpgpu, binary.webGLProgram);\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n    keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode;\n  return key;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, addBias = false,\n      activation: string = null, hasPreluActivation = false) {\n    this.outputShape = outputShape;\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(rc.x, ${aSample});\n          vec4 b = getMatrixB(rc.x, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${constantValue}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${constantValue}));\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(${constantValue});\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape)}\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${outputShape[1]};\n        int cols = ${outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor4D} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    this.outputShape = x.shape;\n    const [, xHeight, xWidth, ] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      uniform int start[${this.rank}];\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nconst CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nexport const SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const NEG = `return -x;`;\n\nexport const CEIL = `return ceil(x);`;\n\nexport const FLOOR = `return floor(x);`;\n\nexport const SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const IS_NAN = `return float(isnan(x));`;\n\nexport const IS_INF = `return float(isinf(x));`;\n\nexport const IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const EXP = `return exp(x);`;\n\nexport const EXPM1 = `return exp(x) - 1.0;`;\n\nexport const LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nexport const LOG1P = `return log(1.0 + x);`;\n\nexport const SQRT = `return sqrt(x);`;\n\nexport const RSQRT = `return inversesqrt(x);`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\n/**\n * mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n *\n * epsilon is the difference between 1.0 and the next representable\n * float. For a single precision 32 bit float this should be 2^-23, see:\n * https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n *\n * too_large = (x > -threshold) is value above which exp(x) may overflow\n * but softplus(x) == x is within machine epsilon\n *\n * too_small = (x < threshold) is value below which exp(x) may underflow,\n * but softplus(x) == exp(x) is within machine epsilon.\n */\nexport const SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));`;\n\nexport const ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const RECIPROCAL = `return 1.0 / x;`;\n\nexport const LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const TO_INT = `return float(int(x));`;\n\nexport const CLONE = 'return x;';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const LOG = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {complex, DataId, div, engine, env, imag, max, MemoryInfo, range, real, RecursiveArray, reshape, scalar, softmax, tensor, tidy, TimingInfo, transpose} from '@tensorflow/tfjs-core';\nimport {backend_util, buffer, kernel_impls, slice_util, util} from '@tensorflow/tfjs-core';\nimport {DataStorage, DataType, KernelBackend, NumericDataType, Rank, Scalar, ShapeMap, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorInfo, TypedArray, upcastType} from '@tensorflow/tfjs-core';\n\nimport {addImplCPU, ceilImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, logImplCPU, multiplyImplCPU, rsqrtImplCPU, simpleAbsImplCPU, sliceImplCPU, subImplCPU} from './kernel_utils/shared';\n\nconst {segment_util} = backend_util;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\n\nimport {AddNProgram} from './addn_gpu';\nimport {AddNPackedProgram} from './addn_packed_gpu';\nimport {ArgMinMaxProgram} from './argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from './argminmax_packed_gpu';\nimport {AvgPool3DBackpropProgram} from './avg_pool_backprop_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport {BinaryOpProgram} from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport {BinaryOpPackedProgram} from './binaryop_packed_gpu';\nimport {getWebGLContext} from './canvas_util';\nimport {ClipProgram} from './clip_gpu';\nimport {ClipPackedProgram} from './clip_packed_gpu';\nimport {ComplexAbsProgram} from './complex_abs_gpu';\nimport {ConcatProgram} from './concat_gpu';\nimport {ConcatPackedProgram} from './concat_packed_gpu';\nimport {Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram} from './conv_backprop_gpu';\nimport {DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram} from './conv_backprop_gpu_depthwise';\nimport {Conv2DProgram, Conv3DProgram} from './conv_gpu';\nimport {DepthwiseConv2DProgram} from './conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from './conv_packed_gpu_depthwise';\nimport {CropAndResizeProgram} from './crop_and_resize_gpu';\nimport {CumSumProgram} from './cumsum_gpu';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {DepthToSpaceProgram} from './depth_to_space_gpu';\nimport {DiagProgram} from './diag_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport {FFTProgram} from './fft_gpu';\nimport {FillProgram} from './fill_gpu';\nimport {GatherProgram} from './gather_gpu';\nimport {GatherNDProgram} from './gather_nd_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {Im2ColPackedProgram} from './im2col_packed_gpu';\nimport {LRNProgram} from './lrn_gpu';\nimport {LRNGradProgram} from './lrn_grad_gpu';\nimport {LRNPackedProgram} from './lrn_packed_gpu';\nimport {MaxPool3DBackpropProgram} from './max_pool_backprop_gpu';\nimport {MatMulPackedProgram} from './mulmat_packed_gpu';\nimport {MultinomialProgram} from './multinomial_gpu';\nimport {OneHotProgram} from './onehot_gpu';\nimport {PackProgram} from './pack_gpu';\nimport {PadProgram} from './pad_gpu';\nimport {PadPackedProgram} from './pad_packed_gpu';\nimport {Pool3DProgram} from './pool_gpu';\nimport {ReduceProgram} from './reduce_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport {ResizeBilinearBackpropProgram} from './resize_bilinear_backprop_gpu';\nimport {ResizeBilinearProgram} from './resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from './resize_bilinear_packed_gpu';\nimport {ResizeNearestNeigborBackpropProgram} from './resize_nearest_neighbor_backprop_gpu';\nimport {ResizeNearestNeighborProgram} from './resize_nearest_neighbor_gpu';\nimport {ReverseProgram} from './reverse_gpu';\nimport {ReversePackedProgram} from './reverse_packed_gpu';\nimport {ScatterProgram} from './scatter_gpu';\nimport {SegmentOpProgram} from './segment_gpu';\nimport {SelectProgram} from './select_gpu';\nimport {SliceProgram} from './slice_gpu';\nimport {SlicePackedProgram} from './slice_packed_gpu';\nimport {StridedSliceProgram} from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport {TileProgram} from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nimport {BackendValues} from '@tensorflow/tfjs-core';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\nfunction mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return binaryop_packed_gpu.PRELU;\n    }\n    return binaryop_gpu.PRELU;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  private dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n  private cpuBackend: KernelBackend;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n  private warnedAboutCPUBackend = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() +\n        (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n        this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    const dataId = tensorInfo.dataId;\n\n    if (this.texData.has(dataId)) {\n      const textureData = this.texData.get(dataId);\n\n      textureData.refCount--;\n\n      if (textureData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensors, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues = complexTensors.real.dataSync() as Float32Array;\n      const imagValues = complexTensors.imag.dataSync() as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensors, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all(\n          [complexTensors.real.data(), complexTensors.imag.data()]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  disposeData(dataId: DataId): void {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensors} = this.texData.get(dataId);\n    if (complexTensors != null) {\n      complexTensors.real.dispose();\n      complexTensors.imag.dispose();\n    }\n    this.texData.delete(dataId);\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  private getCPUBackend(): KernelBackend|null {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    const cpuBackend = this.getCPUBackend();\n    if (!this.warnedAboutCPUBackend && cpuBackend == null) {\n      console.warn(\n          'Your application contains ops that are small enough to be ' +\n          'executed on the CPU backend, however the CPU backend cannot ' +\n          'be found. Consider importing the CPU backend ' +\n          '(@tensorflow/tfjs-backend-cpu) for better performance.');\n\n      this.warnedAboutCPUBackend = true;\n    }\n\n    return cpuBackend != null &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(real.shape, 'complex64');\n    const resultData = this.texData.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: engine().keep(real.clone()),\n      imag: engine().keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      const outValues = sliceImplCPU(\n          this.texData.get(x.dataId).values as TypedArray, begin, size, x.shape,\n          x.dtype);\n      return this.makeOutput(size, x.dtype, outValues);\n    }\n    // Short-circuit computation if the slice is zero-sized.\n    if (util.sizeFromShape(size) === 0) {\n      return tensor([], size, x.dtype) as T;\n    }\n    const {isPacked} = this.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isPacked || !isContinous) {\n      const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n          new SlicePackedProgram(size) :\n          new SliceProgram(size);\n      const customSetup = program.getCustomSetupFunc(begin);\n      return this.compileAndRun(program, [x], null, customSetup);\n    }\n    this.uploadToGPU(x.dataId);\n    return this.shallowSlice(x, begin, size) as T;\n  }\n\n  private shallowSlice(x: Tensor, begin: number[], size: number[]): Tensor {\n    const xTexData = this.texData.get(x.dataId);\n    const t = this.makeOutput(size, x.dtype);\n    const newTexData = this.texData.get(t.dataId);\n    // Copy texture data from the original tensor.\n    Object.assign(newTexData, xTexData);\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n    if (xTexData.slice) {\n      // We are slicing an already sliced tensor, so we have to accumulate\n      // the offset.\n      flatOffset += xTexData.slice.flatOffset;\n    }\n    newTexData.slice = {\n      flatOffset,\n      // Point to the original dataId, which is used to do ref counting.\n      origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    };\n\n    // Increase the ref count for that data bucket.\n    const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n\n    return t;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    const cpuRes = this.tryRunOnCpuOrThrow(\n        [x], () => this.cpuBackend.stridedSlice(x, begin, end, strides));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tensor([], outShape) as T;\n    }\n\n    const program = new StridedSliceProgram(begin, strides, outShape);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new ReversePackedProgram(x.shape, axis) :\n        new ReverseProgram(x.shape, axis);\n    return this.compileAndRun(program, [x]);\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => real(t));\n      const imags = tensors.map((t) => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n    if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n      const rightSide = this.concat(tensors.slice(midIndex), axis);\n      return this.concat([leftSide, rightSide], axis);\n    }\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n      const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n      return this.compileAndRun(program, tensors);\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const outShape =\n        backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n    const tensors2D =\n        tensors.map(t => t.as2D(-1, util.sizeFromShape(t.shape.slice(axis))));\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const res: Tensor = this.compileAndRun(program, tensors2D);\n    return res.reshape(outShape);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    const cpuRes = this.tryRunOnCpuOrThrow([x], () => this.cpuBackend.neg(x));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.NEG, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const [batch, , ] = a.shape;\n\n    // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n    if ((outerShapeA === 1 || outerShapeB === 1) &&\n        sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n      if (transposeA) {\n        a = transpose(a, [0, 2, 1]);\n      }\n      if (transposeB) {\n        b = transpose(b, [0, 2, 1]);\n      }\n\n      const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n      const axis = outerShapeB === 1 ? 2 : 1;\n      const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n      return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n    return this.compileAndRun<Tensor3D>(program, [a, b], dtype);\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          backend_util.FusedBatchMatMulConfig): Tensor3D {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const [batch, , ] = a.shape;\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new MatMulPackedProgram(\n        a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB,\n        hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [a, b];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun<Tensor3D>(program, inputs, dtype);\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64') {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n\n      const realProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n      const imagProgram = new BinaryOpComplexProgram(\n          binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n      const inputs = [\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),\n        this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)\n      ];\n      const real = this.compileAndRun<Tensor>(realProgram, inputs);\n      const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n\n      const complex = this.complex(real, imag);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (this.shouldExecuteOnCPU([a, b])) {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n      const [outValues, outShape] = multiplyImplCPU(\n          a.shape, b.shape, aData.values as TypedArray,\n          bData.values as TypedArray, dtype);\n      return this.makeOutput(outShape, dtype, outValues);\n    }\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], a.dtype);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, radius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n        new LRNProgram(x.shape, radius, bias, alpha, beta);\n    return this.compileAndRun(program, [x]);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    const program =\n        new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n    return this.compileAndRun(program, [inputImage, outputImage, dy]);\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    if (x.dtype === 'string') {\n      const data = this.readSync(x.dataId) as Uint8Array[];\n      const decodedData = data.map(d => util.decodeString(d));\n      const buf = buffer(x.shape, x.dtype, decodedData);\n      return tile(buf, reps) as T;\n    }\n    const program = new TileProgram(x.shape, reps);\n    return this.compileAndRun(program, [x]);\n  }\n\n  pad<T extends Tensor>(\n      x: T, paddings: Array<[number, number]>, constantValue: number): T {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new PadPackedProgram(x.shape, paddings, constantValue) :\n        new PadProgram(x.shape, paddings, constantValue);\n    return this.compileAndRun(program, [x]);\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    const cpuRes = this.tryRunOnCpuOrThrow(\n        [x, indices], () => this.cpuBackend.gather(x, indices, axis));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    const program = new GatherProgram(x.shape, indices.size, axis);\n    return this.compileAndRun(program, [x, indices]);\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return transpose(x.reshape(reshaped), permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  spaceToBatchND<T extends Tensor>(\n      x: T, blockShape: number[], paddings: Array<[number, number]>): T {\n    util.assert(\n        x.rank <= 4,\n        () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const completePaddings: Array<[number, number]> = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n\n    const reshapedPaddedShape =\n        backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n        reshapedPaddedShape.length, blockShape.length, false);\n\n    const flattenShape = backend_util.getReshapedPermuted(\n        paddedX.shape, blockShape, prod, false);\n\n    const paddedXT = transpose(\n        paddedX.reshape(reshapedPaddedShape),\n        permutedReshapedPaddedPermutation);\n    return reshape(paddedXT, flattenShape) as T;\n  }\n\n  private reduce(\n      x: Tensor2D, reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod',\n      dtype: DataType): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const outSize = Math.ceil(inSize / windowSize);\n    const reduceInfo = {windowSize, inSize, batchSize, outSize};\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const output = this.compileAndRun<Tensor2D>(program, [x], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.reduce(output, reduceType, dtype);\n  }\n\n  private argReduce(\n      x: Tensor2D, reduceType: 'max'|'min',\n      bestIndicesA: Tensor2D = null): Tensor2D {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n      batchSize = bestIndicesA.shape[0];\n      inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {\n      windowSize,\n      inSize,\n      batchSize,\n      outSize: Math.ceil(inSize / windowSize)\n    };\n    const program =\n        new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n      inputs.push(bestIndicesA);\n    }\n    const output = this.compileAndRun<Tensor2D>(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n      return output;\n    }\n    return this.argReduce(x, reduceType, output);\n  }\n\n  private argReducePacked(\n      x: Tensor, reduceType: 'max'|'min', bestIndicesA: Tensor = null): Tensor {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(\n        inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = this.compileAndRun<Tensor>(program, inputs, 'int32');\n    if (output.rank === x.rank) {\n      return this.argReducePacked(x, reduceType, output);\n    }\n    return output;\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    const cpuRes =\n        this.tryRunOnCpuOrThrow([x], () => this.cpuBackend.prod(x, axes));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    let axis = 0;\n    const permutation = backend_util.getAxesPermutation([axis], x.rank);\n    let permutedX = x;\n    if (permutation != null) {\n      permutedX = transpose(x, permutation);\n      axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n    }\n\n    const outShape =\n        segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = permutedX.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    let result =\n        this.segOpCompute(\n                a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n    if (permutation != null) {\n      result =\n          transpose(result, backend_util.getUndoAxesPermutation(permutation));\n    }\n    return result;\n  }\n\n  private segOpCompute(\n      x: Tensor2D, segOpType: 'unsortedSegmentSum', segmentIds: Tensor1D,\n      dtype: DataType, numSegments: number): Tensor2D {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize =\n        segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output =\n        this.compileAndRun<Tensor2D>(program, [x, segmentIds], dtype);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n  }\n\n  private argMinMaxReduce(x: Tensor, axis: number, reduceType: 'min'|'max'):\n      Tensor {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims(\n        'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n        x.rank);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n      const [outShape, reduceShape] =\n          backend_util.computeOutAndReduceShapes(x.shape, axes);\n      const inSize = util.sizeFromShape(reduceShape);\n      const a2D = x.as2D(-1, inSize);\n      return this.argReduce(a2D, reduceType).reshape(outShape);\n    }\n    return this.argReducePacked(x, reduceType);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'min');\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    return this.argMinMaxReduce(x, axis, 'max');\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const size = x.shape[axis];\n    let result = x;\n    // Use cumsum parallel algorithm, ref:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n      const program = new CumSumProgram(x.shape, false, reverse);\n      const customSetup = program.getCustomSetupFunc(i);\n      const prevResult = result;\n      result = this.compileAndRun(program, [result], result.dtype, customSetup);\n      prevResult.dispose();\n    }\n    // For exclusive cumsum, shift the end result in the direction of sum and\n    // add 0 to the front index.\n    if (exclusive) {\n      const program = new CumSumProgram(x.shape, exclusive, reverse);\n      const prevResult = result;\n      result = this.compileAndRun(program, [result]);\n      prevResult.dispose();\n    }\n\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    const cpuRes =\n        this.tryRunOnCpuOrThrow([a, b], () => this.cpuBackend.less(a, b));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    const cpuRes =\n        this.tryRunOnCpuOrThrow([a, b], () => this.cpuBackend.greater(a, b));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n    }\n    const program =\n        new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    const program = new SelectProgram(condition.rank, a.shape, a.rank);\n    return this.compileAndRun(\n        program, [condition, a, b], upcastType(a.dtype, b.dtype));\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    const xVals = x.dataSync();\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    const cpuRes =\n        this.tryRunOnCpuOrThrow([a, b], () => this.cpuBackend.minimum(a, b));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    const cpuRes =\n        this.tryRunOnCpuOrThrow([a, b], () => this.cpuBackend.maximum(a, b));\n    if (cpuRes) {\n      return cpuRes;\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    const op = binaryop_gpu.INT_DIV;\n    const outputDtype = 'int32';\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(\n          a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n    }\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], outputDtype);\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (this.shouldExecuteOnCPU([a, b])) {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n      const [outValues, outShape] = addImplCPU(\n          a.shape, b.shape, aData.values as TypedArray,\n          bData.values as TypedArray, dtype);\n      return this.makeOutput(outShape, dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    return this.compileAndRun<Tensor>(program, [x], dtype);\n  }\n\n  private packedBinaryOp(\n      a: TensorInfo, b: TensorInfo, op: string, dtype: DataType,\n      checkOutOfBounds = false) {\n    const program =\n        new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  /**\n   * Computes a complex binary operation that can be decomposed into a simple\n   * binary operation on both the real and imagary parts.\n   */\n  private complexSeparableBinaryOp(a: Tensor, b: Tensor, op: string): Tensor {\n    const aData = this.texData.get(a.dataId);\n    const bData = this.texData.get(b.dataId);\n\n    const [real, imag] = [\n      [aData.complexTensors.real, bData.complexTensors.real],\n      [aData.complexTensors.imag, bData.complexTensors.imag]\n    ].map(complexParts => {\n      const [aPart, bPart] = complexParts;\n\n      const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n      const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n\n      const program = new BinaryOpProgram(op, a.shape, b.shape);\n      return this.compileAndRun<Tensor>(\n          program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n    });\n\n    const complex = this.complex(real, imag);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  // Returns a TensorInfo with the complex shape and the dataId of the\n  // underlying part. We need to do this because a reshaped complex tensor is\n  // not reflected in its parts.\n  private makeComplexComponentTensorInfo(\n      complexTensor: Tensor, complexPart: Tensor): TensorInfo {\n    return {\n      dataId: complexPart.dataId,\n      dtype: complexPart.dtype,\n      shape: complexTensor.shape\n    };\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n\n    // Limit the number of uploaded textures for optimization.\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.addN(tensors.slice(0, midIndex));\n      const rightSide = this.addN(tensors.slice(midIndex));\n      return this.addN([leftSide, rightSide]);\n    }\n\n    const dtype =\n        tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape);\n    // We can make sure shapes are identical in op level.\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ?\n        new AddNPackedProgram(tensors[0].shape, shapes) :\n        new AddNProgram(tensors[0].shape, shapes);\n    return this.compileAndRun<T>(program, tensors, dtype);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    if (this.shouldExecuteOnCPU([a, b])) {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n      const [outValues, outShape] = subImplCPU(\n          a.shape, b.shape, aData.values as TypedArray,\n          bData.values as TypedArray, dtype);\n      return this.makeOutput(outShape, dtype, outValues);\n    }\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n    }\n    const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n    return this.compileAndRun<Tensor>(program, [a, b], dtype);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n    const program = usePackedOp ?\n        new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n        new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n    const dtype = upcastType(a.dtype, b.dtype);\n    return this.compileAndRun<T>(program, [a, b], dtype);\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      const outValues =\n          ceilImplCPU(this.texData.get(x.dataId).values as TypedArray, x.dtype);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.CEIL, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      const outValues = floorImplCPU(\n          this.texData.get(x.dataId).values as TypedArray, x.dtype);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isInf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n  isFinite<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n    return this.compileAndRun(program, [x]);\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      const outValues =\n          expImplCPU(this.texData.get(x.dataId).values as TypedArray, x.dtype);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXP, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n    return this.compileAndRun(program, [x]);\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      const outValues = expm1ImplCPU(\n          this.texData.get(x.dataId).values as TypedArray, x.dtype);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softmax<T extends Tensor>(logits: T, dim: number): T {\n    const axes = util.parseAxisParam([dim], logits.shape);\n    // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n    const maxLogit = max(logits, axes);\n    const expandedShape =\n        backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n    const b = this.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape);\n\n    // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n    // modularization.\n    return div(b, sumExp);\n  }\n\n  log<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      const outValues =\n          logImplCPU(this.texData.get(x.dataId).values as TypedArray, x.dtype);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    if (this.shouldExecuteOnCPU([x])) {\n      const outValues = rsqrtImplCPU(\n          this.texData.get(x.dataId).values as TypedArray, x.dtype);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n    }\n    return this.compileAndRun(program, [x]);\n  }\n\n  prelu<T extends Tensor>(x: T, alpha: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n        new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n    return this.compileAndRun(program, [x, alpha]);\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype) as T;\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n        new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n    return this.compileAndRun(program, [dy, y]);\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  int<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n    return this.compileAndRun(program, [x], 'int32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    let program;\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n      program = new ClipPackedProgram(x.shape);\n    } else {\n      program = new ClipProgram(x.shape);\n    }\n    const customSetup = program.getCustomSetupFunc(min, max);\n    return this.compileAndRun(program, [x], null, customSetup);\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const xData = this.texData.get(x.dataId);\n\n    const program = new ComplexAbsProgram(x.shape);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    return this.compileAndRun<Tensor>(program, inputs) as T;\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n    return this.compileAndRun(program, [x]);\n  }\n\n  step<T extends Tensor>(x: T, alpha: number): T {\n    const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n    return this.compileAndRun(program, [x]);\n  }\n\n  private conv2dByMatMul(\n      x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo,\n      bias?: Tensor, activation?: backend_util.Activation,\n      preluActivationWeights?: Tensor): Tensor4D {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = this.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false;\n\n    // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n    const batchMatMulWillBeUnpacked =\n        (outerShapeX === 1 || outerShapeFilter === 1) &&\n        sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n    if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n        !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n        !reshapeWillBeExpensive) {\n      const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                           xShape[0] * xShape[2] * xShape[3];\n      const xReshaped = reshape(x, [1, targetShape, convInfo.inChannels]);\n      const filterReshaped =\n          reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n      const result = this.fusedBatchMatMul({\n        a: xReshaped as Tensor3D,\n        b: filterReshaped as Tensor3D,\n        transposeA,\n        transposeB,\n        bias,\n        activation,\n        preluActivationWeights\n      });\n      return reshape(result, convInfo.outShape);\n    }\n\n    // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n    const targetShape = isChannelsLast ?\n        xShape[0] * xShape[1] * (xShape[2] + 1) :\n        xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped =\n        reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n\n    const pointwiseConv = this.fusedBatchMatMul({\n      a: xReshaped as Tensor3D,\n      b: filterReshaped as Tensor3D,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights\n    });\n    const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n    return engine().makeTensorFromDataId(\n               pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype) as\n        Tensor4D;\n  }\n\n  private conv2dWithIm2Row(\n      x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo,\n      bias?: Tensor, activation?: backend_util.Activation,\n      preluActivationWeights?: Tensor): Tensor4D {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const {\n      filterWidth,\n      filterHeight,\n      inChannels,\n      outWidth,\n      outHeight,\n      dataFormat\n    } = convInfo;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n\n    const xSqueezed = x.squeeze([0]);\n    const w2Row = filter.reshape([1, sharedDim, -1]);\n\n    const im2ColProgram =\n        new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col: Tensor3D =\n        this.compileAndRun<Tensor2D>(im2ColProgram, [xSqueezed]).reshape([\n          1, x2ColShape[0], x2ColShape[1]\n        ]);\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(\n        im2Col.shape, [1, numCols, convInfo.outChannels], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [im2Col, w2Row];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    const product = this.compileAndRun<Tensor4D>(matmulProgram, inputs);\n\n    if (isChannelsLast) {\n      return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n    } else {\n      return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n    }\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n      return this.conv2dWithIm2Row(\n          input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs: TensorInfo[] = [input, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    return this.compileAndRun(program, inputs);\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(x, filter, convInfo);\n    }\n    if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n      return this.conv2dWithIm2Row(x, filter, convInfo);\n    }\n    const program = new Conv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv2dDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ?\n        mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n        null;\n    const inputs: Tensor[] = [input, filter];\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasBias) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (shouldPackDepthwiseConv) {\n      program = new DepthwiseConvPacked2DProgram(\n          convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n      return this.compileAndRun(program, inputs);\n    }\n\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    return this.compileAndRun(program, inputs);\n  }\n\n  depthwiseConv2D(\n      x: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n        convInfo.strideWidth <= 2 &&\n        convInfo.outChannels / convInfo.inChannels === 1) {\n      program = new DepthwiseConvPacked2DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n\n    program = new DepthwiseConv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  depthwiseConv2DDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  depthwiseConv2DDerFilter(\n      x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv3dDerInput(\n      dy: Tensor5D, filter: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Conv3DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  avgPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const program = new Pool3DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const getPositions = true;\n    const maxPool3dPositionsProgram =\n        new Pool3DProgram(convInfo, 'max', getPositions);\n    const maxPool3dPositions: Tensor5D =\n        this.compileAndRun(maxPool3dPositionsProgram, [x]);\n    const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = this.compileAndRun(\n        maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n    maxPool3dPositions.dispose();\n    return result as Tensor5D;\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n        new ResizeBilinearPackedProgram(\n            x.shape, newHeight, newWidth, alignCorners) :\n        new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean):\n      Tensor4D {\n    const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n\n    return this.compileAndRun(program, [dy]);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    const program = new ResizeNearestNeighborProgram(\n        x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean): Tensor4D {\n    const program =\n        new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n    return this.compileAndRun(program, [dy]);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    const probs = normalized ? logits : softmax(logits);\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    return this.compileAndRun(program, [probs], 'int32', customSetup);\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n    return this.compileAndRun(program, [indices]);\n  }\n\n  diag(x: Tensor): Tensor {\n    const program = new DiagProgram(x.size);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cropAndResize(\n      image: Tensor4D, boxes: Tensor2D, boxIndex: Tensor1D,\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number): Tensor4D {\n    const program = new CropAndResizeProgram(\n        image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return this.compileAndRun(program, [x]);\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(updates, indices, shape);\n\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n    const flattenX = updates.reshape([numUpdates, sliceSize]);\n\n    if (outputSize === 0) {\n      return backend_util.reshapeTensor(tensor([]), shape);\n    }\n    const defaultValue = scalar(0);\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides,\n        flattenShape);\n    const res: Tensor =\n        this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n    return res.reshape(shape);\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, strides, outputSize} =\n        backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(\n        numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides,\n        [outputSize, 1], sumDupeIndices);\n    const res: Tensor = this.compileAndRun(\n        program, [sparseValues, sparseIndices, defaultValue]);\n    return res.reshape(outputShape);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    const inverse = false;\n    return this.fftImpl(x, inverse);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    const inverse = true;\n    return this.fftImpl(x, inverse);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const xData = this.texData.get(x.dataId);\n\n    const realProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n    const imagProgram =\n        new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n    const inputs = [\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n      this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n    ];\n\n    const real = this.compileAndRun<Tensor>(realProgram, inputs);\n    const imag = this.compileAndRun<Tensor>(imagProgram, inputs);\n    const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        backend_util.prepareAndValidate(x, indices);\n\n    const flattenIndices = indices.reshape([numSlices, sliceRank]);\n    const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n    const program =\n        new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res: Tensor = this.compileAndRun(program, [flattenX, flattenIndices]);\n    return res.reshape(resultShape);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || util.inferDtype(value);\n\n    if (dtype === 'string') {\n      // String type should be handled in CPU memory.\n      const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n      values.fill(value as string);\n      return engine().makeTensor(values, shape, dtype, this) as Tensor<R>;\n    } else {\n      const program = new FillProgram(shape, value as number);\n      const customSetup = program.getCustomSetupFunc(value as number);\n      return this.compileAndRun(program, [], dtype, customSetup);\n    }\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported under string dtype');\n    } else {\n      // TODO(cais, smilkov): Add WebGL shader for onesLike:\n      //   https://github.com/tensorflow/tfjs/issues/1293\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  makeTensorInfo(shape: number[], dtype: DataType, values?: BackendValues):\n      TensorInfo {\n    const dataId = this.write(values, shape, dtype);\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  private unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  private packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun<K extends TensorInfo>(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): K {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customSetup,\n        preventEagerUnpackingOfOutput);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as {} as K;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  private uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  private tryRunOnCpuOrThrow<T extends Tensor>(\n      inputs: TensorInfo[], fn: () => T): T|null {\n    if (this.shouldExecuteOnCPU(inputs)) {\n      try {\n        return fn();\n      } catch (e) {\n        if (env().getBool('IS_TEST')) {\n          throw new Error('CPU forwarding failed');\n        }\n      }\n    }\n    return null;\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","import {BinaryInputs, DataType, env, KernelFunc, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippets Op snippet to create `UnaryOpProgram`.\n */\nexport function unaryKernelFunc(opSnippet: string): KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n    const program = new UnaryOpProgram(x.shape, opSnippet);\n    return webglBackend.runWebGLProgram(program, [x], x.dtype);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    opSnippet: string, packedOpSnippet: string,\n    checkOutOfBoundsForPackedProgram?: boolean, dtype?: DataType): KernelFunc {\n  // TODO(jingjin): handle complex64.\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n        new BinaryOpPackedProgram(\n            packedOpSnippet, a.shape, b.shape,\n            !!checkOutOfBoundsForPackedProgram) :\n        new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    const $dtype = dtype || a.dtype;\n    const output = webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    return output;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\n\nexport const atan2KernelFunc = binaryKernelFunc(ATAN2, ATAN2_PACKED);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolBackprop, AvgPoolBackpropAttrs, AvgPoolBackpropInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolBackprop(args: {\n  inputs: AvgPoolBackpropInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolBackpropAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolBackprop');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolBackpropConfig: KernelConfig = {\n  kernelName: AvgPoolBackprop,\n  backendName: 'webgl',\n  kernelFunc: avgPoolBackprop as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNormKernelFunc: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNormKernelFunc as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cosKernelFunc = unaryKernelFunc(COS);\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cosKernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Div} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const divKernelFunc = binaryKernelFunc(\n    DIV, DIV_PACKED, true /* checkOutOfBoundsForPackedProgram */);\n\nexport const divConfig: KernelConfig = {\n  kernelName: Div,\n  backendName: 'webgl',\n  kernelFunc: divKernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    const program = new ReduceProgram(\n        {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    const previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeData(previousResult.dataId);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, null /* customSetup */,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs, MaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxInputs;\n    const {reductionIndices, keepDims} = attrs as {} as MaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n\n    const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const maxInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    let maxInput = x;\n    if (maxInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(maxInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const maxInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        maxInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const maxInputData = webglBackend.texData.get(maxInput.dataId);\n        maxInputData.values = maxInputValues;\n      } else {\n        maxInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n    let outShape = maxOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    }\n\n    let out;\n    if (shouldExecuteOnCPU) {\n      const xTexData = webglBackend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const outValues = maxImplCPU(\n          values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n      out = webglBackend.makeTensorInfo(outShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = maxImpl(maxInput, reduceShape, outShape, webglBackend);\n    }\n\n    if (maxInputIsTransposed) {\n      webglBackend.disposeIntermediateTensorInfo(maxInput);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolBackprop, MaxPoolBackpropAttrs, MaxPoolBackpropInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolBackprop(args: {\n  inputs: MaxPoolBackpropInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolBackpropAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolBackprop');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolBackpropConfig: KernelConfig = {\n  kernelName: MaxPoolBackprop,\n  backendName: 'webgl',\n  kernelFunc: maxPoolBackprop as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV3Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold} =\n        attrs as unknown as NonMaxSuppressionV3Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n\n    return kernel_impls.nonMaxSuppressionV3Impl(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV4Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n        attrs as unknown as NonMaxSuppressionV4Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n        padToMaxOutputSize);\n\n    return [selectedIndices, validOutputs];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    backend_util.warn(\n        'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n        'Call tf.nonMaxSuppressionAsync() instead');\n\n    const {boxes, scores} = inputs as NonMaxSuppressionV5Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as unknown as NonMaxSuppressionV5Attrs;\n\n    const gpuBackend = backend as MathBackendWebGL;\n\n    const boxesVals = gpuBackend.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = gpuBackend.readSync(scores.dataId) as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], radians: number,\n      fillValue: number|[number, number, number],\n      center: number|[number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    const sinFactor = Math.sin(radians).toFixed(3);\n    const cosFactor = Math.cos(radians).toFixed(3);\n    this.outputShape = imageShape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const centerXString = centerX.toFixed(3);\n    const centerYString = centerY.toFixed(3);\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${\n        cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${\n        sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram(\n        (image as Tensor4D).shape, radians, fillValue, center);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sinKernelFunc = unaryKernelFunc(SIN);\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sinKernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const squareKernelFunc = unaryKernelFunc(SQUARE);\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: squareKernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifferenceKernelFunc =\n    binaryKernelFunc(SQUARED_DIFFERENCE, SQUARED_DIFFERENCE);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifferenceKernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tanKernelFunc = unaryKernelFunc(TAN);\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tanKernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {atan2Config} from './kernels/Atan2';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPoolBackpropConfig} from './kernels/AvgPoolBackprop';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {cosConfig} from './kernels/Cos';\nimport {divConfig} from './kernels/Div';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {identityConfig} from './kernels/Identity';\nimport {maxConfig} from './kernels/Max';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPoolBackpropConfig} from './kernels/MaxPoolBackprop';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {sinConfig} from './kernels/Sin';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {tanConfig} from './kernels/Tan';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  atan2Config,\n  avgPoolConfig,\n  avgPoolBackpropConfig,\n  batchNormConfig,\n  cosConfig,\n  divConfig,\n  flipLeftRightConfig,\n  fromPixelsConfig,\n  identityConfig,\n  maxConfig,\n  maxPoolConfig,\n  maxPoolBackpropConfig,\n  maxPoolWithArgmaxConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  reshapeConfig,\n  rotateWithOffsetConfig,\n  sinConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  tanConfig,\n  transposeConfig,\n  uniqueConfig,\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as TransposeInputs;\n    const {perm} = attrs as {} as TransposeAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = x.shape[perm[i]];\n    }\n\n    let out: TensorInfo;\n    if (webglBackend.shouldExecuteOnCPU([x])) {\n      const xTexData = webglBackend.texData.get(x.dataId);\n      const values = xTexData.values as TypedArray;\n      const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n      out = webglBackend.makeTensorInfo(newShape, x.dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n    } else {\n      out = transposeImpl(x, perm, webglBackend);\n    }\n    return out;\n  }\n};\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.6.0';\nexport {version};\n"],"names":["PackingScheme","TextureUsage","PhysicalTextureType","contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","glany","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","downloadTextureFormat","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","requested","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","_a","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","backend_util","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","registerFlag","get","device_util","isMobile","threshold","addImpl","a","b","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","expImpl","exp","expm1Impl","expm1","floorImpl","floor","logImpl","multiplyImpl","aValue","bValue","rsqrtImpl","sqrt","subImpl","simpleAbsImplCPU","vals","resultValues","Float32Array","addImplCPU","ceilImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","logImplCPU","maxImplCPU","reduceSize","outShape","offset","j","value","multiplyImplCPU","rsqrtImplCPU","sliceImplCPU","begin","isContinous","slice_util","isSliceContinous","xStrides","flatOffset","computeFlatOffset","subarray","outVals","rank","strides","xLoc","idx","xIndex","subImplCPU","transposeImplCPU","xVals","xShape","perm","xRank","xSize","newStrides","newLoc","uniqueImplCPU","axis","$axis","parseAxisParam","uniqueElements","indices","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","push","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","set","outputShape","outputValues","shapes","this","variableNames","_","snippets","variable","operation","userCode","reduceInfo","firstPass","windowSize","batchSize","outSize","compOp","indexSnippet","getVecChannels","name","getChannels","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","stride","getFlatIndexFrom3D","ENCODE_FLOAT_SNIPPET","makeShader","inputsInfo","usesPackedTextures","prefixSnippets","x","shapeInfo","logicalShape","isUniform","outputSamplingSnippet","floatTextureSetOutputSnippet","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","inputInfo","coordsSnippet","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","type","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","texShape","inTexShape","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","texelsInBatchN","batches","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","texNumR","texNumC","_b","tNumR","tNumC","getFlatOffsetUniformName","getSamplerScalar","getUniformSampler","getSampler1D","texNumR_1","texNumC_1","keptDims","squeezedShape","newInputInfo","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","params","getPackedSamplerND","inSize","JSON","parse","stringify","sourceLocSetup","sourceRank","sourceLocDType","channels","inChannel","intChannels","srcRCoords","concat","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","convInfo","filterHeight","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","avgMultiplier","outHeight","outWidth","filterDepth","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outDepth","COMPLEX_MULTIPLY","ADD","SUB","MUL","PRELU","checkOutOfBounds","checkOutOfBoundsString","ClipProgram","gpgpu","webGLProgram","_this","minLoc","getUniformLocationNoThrow","maxLoc","uniform1f","ClipPackedProgram","computeOutShape","offsets","shift","lastIndex","lastShift","channel","lastChannels","allChannels","getValueSnippet","shift_1","shiftedChannels","channelIdx","c","filterShape","isChannelsLast","dataFormat","inHeight","inWidth","rowDim","colDim","channelDim","outChannels","inDepth","channelMul","inChannels","addBias","activation","hasPreluActivationWeights","inputDepthNearestVec4","inputDepthVec4Remainder","activationSnippet","applyActivationSnippet","addBiasSnippet","hasPreluActivation","xNumRows","xNumCols","texelsAcross","mainLoop","r","texelC","nextTexelOffset","imageShape","boxShape","cropSize","method","extrapolationValue","batch","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","_c","widthRatio","widthScale","inX","exclusive","reverse","val","getCoords","condition","idxString","getFinalCoord","CumSumProgram","DENSE","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","DepthToSpaceProgram","DOWNLOAD","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","row","col","COMPLEX_FFT","inputShape","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","FillProgram","valueLoc","indicesLength","sourceCoords","currentCoords","getSourceCoords","sliceDim","stridesType","strideString","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","glVersion","COLOR_BUFFER_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","GPGPUContext","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","bindTextureToFrameBuffer","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","fenceContext","createFence","pollFence","query","isFencePassed","gl2_1","sync_1","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","debug","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","outputMatrixTexture","setOutputMatrixTextureDriver","outputPackedMatrixTexture","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","webgl_util.validateFramebuffer","debugValidate","drawElements","TRIANGLES","UNSIGNED_SHORT","disjointQueryTimerExtension","getQueryTimerExtension","ext_1","getQueryTimerExtensionWebGL2","query_1","createQuery","TIME_ELAPSED_EXT","ext","getQueryTimerExtensionWebGL1","createQueryEXT","beginQueryEXT","endQueryEXT","ext_2","repeatedTry","getQueryTime","queryTimerVersion","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","arr","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","pollItems","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","itemsPerBlockRow","unrolled","radius","bias","beta","powOperator","rad","maxD","basis","depthRadius","transposeA","transposeB","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","numOutcomes","numSamples","MultinomialProgram","seed","seedLoc","numIndices","onValue","offValue","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","coord","getSourceCoordsArr","getOutput","paddings","constantValue","p","start","end","unpackedCoords","source","cLimit","componentSetup","paddingArea","poolType","computePositions","flattenPositions","includeBatchInIndex","isAvgPool","batchFlattenPositionStr","flattenPositionStr","initializationValue","filterWidthNearestVec4","filterWidthVec4Remainder","updateSnippet","reduceType","compareOp","windowSizeNearestVec4","windowSizeVec4Remainder","vecType","thisRC","dy","alignCorners","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","newHeight","newWidth","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","roundBase","inCoords","getInCoord","nextColumn","nextRow","getChannel","inCoordsArray","channels1","getR","getG","getB","getA","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","cRank","cCoords","abCoords","cCoordVars","abCoordVars","destSize","body","uniformPart","SliceProgram","startLoc","uniform1iv","sourceLoc","upperRow","lowerRow","SlicePackedProgram","inputDtype","newCoords","outputAxis_1","TextureManager","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","newTexture","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture_1","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","logicalTexType","deleteTexThreshold","deleteMatrixTexture","texList","texIndex","splice","logEnabled","total","freeRatio","round","tex","numElements","internalFormatForPhysicalTexType","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","reps","opSnippet","CHECK_NAN_SNIPPET","ABS","RELU","RELU6","ELU","SELU","SELU_SCALEALPHA","SELU_SCALE","NEG","CEIL","FLOOR","EXP","EXPM1","ERF","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","CLONE","segment_util","kernel_impls","tile","topkImpl","whereImpl","binaryCaches","mapActivationToShaderProgram","packed","unary_packed_op.RELU","unary_op.RELU","unary_packed_op.ELU","unary_op.ELU","unary_packed_op.RELU6","unary_op.RELU6","binaryop_packed_gpu.PRELU","binaryop_gpu.PRELU","_super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","tslib_1.__extends","MathBackendWebGL","numDataIds","cpuBackend","pendingDeletes","checkNumericalProblems","dataId","refCount","has","tensorInfo","textureData","disposeData","complexTensors","UnaryOpPackedProgram","unary_op.CLONE","UnaryOpProgram","runWebGLProgram","readSync","disposeIntermediateTensorInfo","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","dataSync","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","pendingRead","subscribers_1","read","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","tex_util.getDenseTexShape","createAndWaitForFence","all","ps","dTypeVals","subscribers","delete","pendingDisposal","webgl_util.canBeRepresented","tmpTarget","tmpData_1","vals_1","downloadMatrixFromPackedTexture","shouldUsePackedProgram","webgl_util.getShapeAs3D","EncodeFloatPackedProgram","EncodeFloatProgram","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","kernelMs_1","sum","ms","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startMs","endMs","waitForQueryAndGetTime","timerQuery","add","releaseGPUData","dispose","key","origDataId","dataRefCount","releaseTexture","uploadToGPU","findBackend","sizeThreshold","getCPUBackend","warnedAboutCPUBackend","every","makeOutput","keep","clone","shouldExecuteOnCPU","outValues","customSetup","getCustomSetupFunc","compileAndRun","shallowSlice","xTexData","newTexData","assign","cpuRes","tryRunOnCpuOrThrow","stridedSlice","some","StridedSliceProgram","ReversePackedProgram","ReverseProgram","tensors","reals","imags","complex","midIndex","leftSide","rightSide","program_1","ConcatPackedProgram","tensors2D","as2D","ConcatProgram","reshape","neg","packedUnaryOp","unary_op.NEG","outerShapeA","outerShapeB","transpose","a3D","as3D","b3D","multiply","upcastType","MatMulPackedProgram","preluActivationWeights","hasBias","fusedActivation","aData","bData","realProgram","BinaryOpComplexProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","makeComplexComponentTensorInfo","real_1","imag_1","complex_1","packedBinaryOp","binaryop_gpu.MUL","BinaryOpProgram","LRNPackedProgram","LRNProgram","inputImage","outputImage","LRNGradProgram","decodedData","decodeString","buf","TileProgram","PadPackedProgram","PadProgram","gather","GatherProgram","blockShape","crops","prod","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","flattenShape","paddedXT","computeOptimalWindowSize","ReduceProgram","bestIndicesA","ArgMinMaxProgram","argReduce","ArgMinMaxPackedProgram","argReducePacked","axes","assertAxesAreInnerMostDims","reduceShape","a2D","outputDType","tf.sumOutType","segmentIds","permutation","getAxesPermutation","permutedX","getInnerMostAxes","segOpCompute","getUndoAxesPermutation","segOpComputeOptimalWindowSize","SegmentOpProgram","range","argMinMaxReduce","log2","prevResult","less","greater","SelectProgram","condVals","k","sorted","minimum","BinaryOpPackedProgram","maximum","complexSeparableBinaryOp","binaryop_gpu.ADD","complexTensor","complexPart","addN","d1","d2","AddNPackedProgram","AddNProgram","binaryop_gpu.SUB","unary_op.CEIL","unary_op.FLOOR","unary_op.EXP","unary_op.EXPM1","logits","dim","maxLogit","expandedShape","expandShapeToKeepDim","subtract","sumExp","div","unary_op.SELU","unary_op.ABS","xData","ComplexAbsProgram","unary_op.ERF","unary_op.STEP","sharedMatMulDim","outerShapeX","outerShapeFilter","batchMatMulWillBeUnpacked","reshapeWillBeExpensive","targetShape_1","xReshaped_1","filterReshaped_1","fusedBatchMatMul","targetShape","xReshaped","originalXTexDataShape","webgl_util.isReshapeFree","filterReshaped","pointwiseConv","pointwiseConvTexData","makeTensorFromDataId","numCols","x2ColShape","xSqueezed","squeeze","w2Row","im2ColProgram","Im2ColPackedProgram","im2Col","matmulProgram","product","conv2dByMatMul","conv2dWithIm2Row","Conv2DProgram","Conv2DDerInputProgram","Conv2DDerFilterProgram","shouldPackDepthwiseConv","DepthwiseConvPacked2DProgram","DepthwiseConv2DProgram","DepthwiseConv2DDerInputProgram","DepthwiseConv2DDerFilterProgram","Conv3DProgram","Conv3DDerInputProgram","Conv3DDerFilterProgram","castTensor","outIndex","fill","Pool3DProgram","avgPool3dBackpropProgram","AvgPool3DBackpropProgram","maxPool3dPositionsProgram","maxPool3dPositions","maxPool3dBackPropProgram","MaxPool3DBackpropProgram","ResizeBilinearPackedProgram","ResizeBilinearProgram","ResizeBilinearBackpropProgram","ResizeNearestNeighborProgram","ResizeNearestNeigborBackpropProgram","normalized","probs","softmax","OneHotProgram","DiagProgram","image","boxes","boxIndex","CropAndResizeProgram","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","sizeSplits","updates","sliceRank","numUpdates","outputSize","flattenIndices","flattenX","reshapeTensor","defaultValue","scalar","ScatterProgram","sparseIndices","sparseValues","fftImpl","FFTProgram","fft_gpu.COMPLEX_FFT","indicesShape","resultShape","numSlices","GatherNDProgram","inferDtype","getArrayFromDType","makeTensor","stop","linspaceImpl","write","UnpackProgram","PackProgram","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","ReshapePackedProgram","DecodeMatrixPackedProgram","DecodeMatrixProgram","outputDtype","preventEagerUnpackingOfOutput","makeTensorInfo","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","packedInputs","uniformValues","unpackTensor","packTensor","savedInput","packedReshape","outputData","keyInputs","hasOffset","keyUserCode","constructor","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","shader_compiler.makeShader","infLoc","nanLoc","uniformLocations","varName","gpgpu_math.compileProgram","startTimer","outTex","setOutputPackedMatrixTexture","setOutputMatrixTexture","Infinity","NaN","varLoc","varOffsetLoc","uniform1fv","setInputMatrixTexture","executeProgram","gpgpu_math.runProgram","info","endTimer","unpacked","outInfo","getBinary","HTMLCanvasElement","remove","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","floatPrecision","webgl_util.getTextureShapeFromLogicalShape","isByteArray","EncodeMatrixPackedProgram","EncodeMatrixProgram","tempDenseInputHandle","getTexture","encodedOutputTarget","outputTexData","acquireTexture","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","fn","KernelBackend","forceHalfFloat","isBrowser","registerBackend","webgl","unaryKernelFunc","backend","webglBackend","binaryKernelFunc","packedOpSnippet","checkOutOfBoundsForPackedProgram","$dtype","atan2KernelFunc","CHECK_NAN_SNIPPET_BINARY","atan2Config","kernelName","Atan2","backendName","kernelFunc","identity","args","incRef","identityConfig","Identity","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","avgPoolProgram","Pool2DProgram","fromPixels2DContext","avgPoolBackpropConfig","AvgPoolBackprop","avgPoolBackpropProgram","AvgPool2DBackpropProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","BatchNormPackedProgram","BatchNormProgram","cosKernelFunc","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","divKernelFunc","divConfig","Div","flipLeftRightConfig","FlipLeftRight","FlipLeftRightProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","drawImage","tempPixelHandle","FromPixelsPackedProgram","FromPixelsProgram","reductionType","reductionStages","stages","getReductionStages","previousResult","$shape","inferFromImplicitShape","$xSize","reshapeConfig","Reshape","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","outputOrder","switchedOrder","getc","transposeImpl","TransposePackedProgram","TransposeProgram","maxConfig","Max","reductionIndices","keepDims","origAxes","permutedAxes","maxInputIsTransposed","maxInput","maxInputValues","out","maxOutShape","reshapedInput","reduced","reshapedOutput","maxImpl","maxPoolConfig","MaxPool","maxPoolProgram","maxPoolBackpropConfig","MaxPoolBackprop","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","MaxPool2DBackpropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","dilations","poolOutput","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","gpuBackend","boxesVals","scoresVals","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","nonMaxSuppressionV3Impl","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","_d","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","radians","fillValue","center","sinFactor","sin","cosFactor","cos","centerX","centerY","centerXString","centerYString","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","RotateProgram","sinKernelFunc","sinConfig","Sin","squareKernelFunc","squareConfig","Square","squaredDifferenceKernelFunc","squaredDifferenceConfig","SquaredDifference","tanKernelFunc","kernelConfigs_1","Tan","Transpose","cpuTranspose","Unique","_i","kernelConfig","registerKernel"],"mappings":"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"}